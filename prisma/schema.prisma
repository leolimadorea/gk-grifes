generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum ProductStatus {
    IN_STOCK
    OUT_STOCK
}

enum PaymentMethod {
    PIX
    CREDITO
    DEBITO
}

enum PaymentStatus {
    APPROVED
    PENDING
}

model Product {
    id          Int           @id @default(autoincrement())
  img         String        @db.VarChar(512)
    title       String
    price       Float?
    categoryId  Int
    subCategoryId Int?       
    description String        @db.Text
    quantity    Int?           @default(1)
    status      ProductStatus
    category    Category      @relation(fields: [categoryId], references: [id])
    subCategory SubCategory?  @relation(fields: [subCategoryId], references: [id]) 
    payments    Payment[]
    variants    Variant[] 
    productVariantValues ProductVariantValue[]


    paymentProducts PaymentProduct[]
}

model Variant {
  id          Int           @id @default(autoincrement())
  name        String
  productId   Int?
  product     Product?      @relation(fields: [productId], references: [id])
  values      VariantValue[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model VariantValue {
  id                 Int                  @id @default(autoincrement())
  name               String
  variantId          Int
  variant            Variant              @relation(fields: [variantId], references: [id])
  productVariantValues ProductVariantValue[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductVariantValue {
  id             Int          @id @default(autoincrement())
  productId      Int
  variantValueId Int
  product        Product       @relation(fields: [productId], references: [id])
  variantValue   VariantValue  @relation(fields: [variantValueId], references: [id])
  price          Float         @default(0.0)
  stock          Int           @default(0)
  paymentProducts PaymentProduct[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Category {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    imageUrl    String?
    createdAt   DateTime  @default(now())
    products    Product[]
    subCategories SubCategory[]

}


model SubCategory {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    imageUrl    String?
    categoryId  Int
    category    Category  @relation(fields: [categoryId], references: [id])
    products    Product[]

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}


enum Role {
    SUBSCRIBER
    ADMIN
}

enum DeviceType {
    MOBILE
    DESKTOP
}

model AccessLog {
    id          Int        @id @default(autoincrement())
    userId      Int?
    ip          String
    city        String?
    browser     String
    deviceType  DeviceType
    isIphone    Boolean
    createdAt   DateTime   @default(now())
    deviceBrand String?
    deviceModel String?
    user        User?      @relation(fields: [userId], references: [id])

    @@index([userId], map: "AccessLog_userId_fkey")
}

model User {
    id          Int         @id @default(autoincrement())
    name        String?
    email       String      @unique
    password    String
    image_url   String?
    role        Role        @default(SUBSCRIBER)
    phoneNumber String?
    AccessLog   AccessLog[]
    payments    Payment[]
    createdAt   DateTime    @default(now())

    @@index([role], map: "User_role_fkey")
}

model Payment {
    id              Int           @id @default(autoincrement())
    userId          Int
    productId       Int?
    productQuantity Int?
    amount          Float
    gatewayId       String        @unique
    paymentMethod   PaymentMethod
    status          PaymentStatus
    createdAt       DateTime      @default(now())
    couponCode      String?

    product Product? @relation(fields: [productId], references: [id])
    user    User     @relation(fields: [userId], references: [id])

    paymentProducts PaymentProduct[]

    paymentDeliveryAddress PaymentDeliveryAddress[]
}

model PaymentProduct {
    id        Int      @id @default(autoincrement())
    paymentId Int
    productId Int
    quantity  Int
    approved  Boolean?
    variantId Int?
   
    product Product @relation(fields: [productId], references: [id])
    payment Payment @relation(fields: [paymentId], references: [id])
    variant ProductVariantValue? @relation(fields: [variantId], references: [id])
}

model PaymentDeliveryAddress {
    id         Int     @id @default(autoincrement())
    paymentId  Int
    address    String
    city       String
    state      String
    country    String
    zip        String
    phone      String
    cpf        String
    name       String
    serviceId  String
    complement String?
    number     String?

    payment Payment @relation(fields: [paymentId], references: [id])
}

model Coupon {
    id              String              @id
    code            String              @unique
    discount        Float
    discountType    Coupon_discountType
    maxUses         Int                 @default(-1)
    startAmount     Int                 @default(-1)
    availableAmount Int                 @default(-1)
    isActive        Boolean             @default(true)
    createdAt       DateTime            @default(now())
    updatedAt       DateTime
    productId       Int?
}
enum Coupon_discountType {
    PERCENTAGE
    FIXED
}
model accessToken {
        id         Int    @id @default(autoincrement())
        token      String?  @db.Text
        refreshToken String? @db.Text
        expiresAt DateTime?
    }